////
/// @group breakpoint
////

@use 'sass:map';
@use './functions';
@use './variables';
@use '../unit';

///
/// すべてのブレークポイントをCSS変数として出力する
///
/// @example scss - scss
///   @use '@iwbc/sass-utils/scss/breakpoint' with (
///     $breakpoints: ('sp': 0, 'lgsp': 420px, 'tab': 768px),
///   );
///
///   :root {
///      @include breakpoint.css-variables;
///   }
///
/// @example css - css
///   :root {
///     --breakpoint-sp: 0;
///     --breakpoint-lgsp: 420px;
///     --breakpoint-tab: 768px;
///   }
///

@mixin cssvars() {
  @each $key, $value in variables.$breakpoints {
    --breakpoint-#{$key}: #{$value};
  }
}

///
/// 幅が指定したブレークポイント以上の場合にスタイルを適用する
///
/// @param {string} $key-value - $breakpointsのキーまたは幅の値
/// @param {boolean | null} $print [null] - 印刷時にスタイルを適用するかどうか true=適用する false=適用しない null=ブレークポイントや用紙サイズによる
///
/// @example scss - scss
///   @use '@iwbc/sass-utils/scss/breakpoint' with (
///     $breakpoints: ('sp': 0, 'lgsp': 420px, 'tab': 768px),
///     $print-min-width: 768px
///   );
///
///   .lgsp {
///     @include breakpoint.min('lgsp') {
///       width: 50%;
///     }
///   }
///
///   .tab {
///     @include breakpoint.min('tab') {
///       width: 50%;
///     }
///   }
///
///   .any {
///     @include breakpoint.min(1024px) {
///       width: 50%;
///     }
///   }
///
///   .print {
///     @include breakpoint.min('lgsp', true) {
///       width: 50%;
///     }
///   }
///
///   .no-print {
///     @include breakpoint.min('tab', false) {
///       width: 50%;
///     }
///   }
///
/// @example css - css
///   @media (420px <= width) {
///     .lgsp {
///       width: 50%;
///     }
///   }
///
///   @media print, (768px <= width) {
///     .tab {
///       width: 50%;
///     }
///   }
///
///   @media print, (1024px <= width) {
///     .any {
///       width: 50%;
///     }
///   }
///
///   @media print, (420px <= width) {
///     .print {
///       width: 50%;
///     }
///   }
///
///   @media screen and (768px <= width) {
///     .no-print {
///       width: 50%;
///     }
///   }
///
@mixin min($key-value, $print: null) {
  $min: if(map.has-key(variables.$breakpoints, $key-value), functions.get-value($key-value), $key-value);
  $print: functions.print($min, $print);

  @if unit.strip($min) != 0 {
    @if $print == true {
      @media print, ($min <= width) {
        @content;
      }
    } @else if $print == false {
      @media screen and ($min <= width) {
        @content;
      }
    } @else {
      @media ($min <= width) {
        @content;
      }
    }
  } @else {
    @if $print == true {
      @media print {
        @content;
      }
    } @else if $print == false {
      @media screen {
        @content;
      }
    } @else {
      @content;
    }
  }
}

///
/// 幅が指定したブレークポイント以下の場合にスタイルを適用する
///
/// @param {string} $key-value - $breakpointsのキーまたは幅の値
/// @param {boolean | null} $print [null] - 印刷時にスタイルを適用するかどうか true=適用する false=適用しない null=ブレークポイントや用紙サイズによる
///
/// @example scss - scss
///   @use '@iwbc/sass-utils/scss/breakpoint' with (
///     $breakpoints: ('sp': 0, 'tab': 768px),
///     $print-min-width: 768px
///   );
///
///   .sp {
///     @include breakpoint.max('sp') {
///       width: 50%;
///     }
///   }
///
///   .any {
///     @include breakpoint.max(1200px) {
///       width: 50%;
///     }
///   }
///
///   .print {
///     @include breakpoint.max('sp', true) {
///       width: 50%;
///     }
///   }
///
///   .no-print {
///     @include breakpoint.max('sp', false) {
///       width: 50%;
///     }
///   }
///
/// @example css - css
///   @media (width < 768px) {
///     .sp {
///       width: 50%;
///     }
///   }
///
///   @media (width <= 1200px) {
///     .any {
///       width: 50%;
///     }
///   }
///
///   @media print, (width < 768px) {
///     .print {
///       width: 50%;
///     }
///   }
///
///   @media screen and (width < 768px) {
///     .no-print {
///       width: 50%;
///     }
///   }
///
@mixin max($key-value, $print: null) {
  @if map.has-key(variables.$breakpoints, $key-value) {
    $next: functions.get-next-value($key-value);

    @if $next {
      @if $print == true {
        @media print, (width < $next) {
          @content;
        }
      } @else if $print == false {
        @media screen and (width < $next) {
          @content;
        }
      } @else {
        @media (width < $next) {
          @content;
        }
      }
    } @else {
      @if $print == true {
        @media print {
          @content;
        }
      } @else if $print == false {
        @media screen {
          @content;
        }
      } @else {
        @content;
      }
    }
  } @else {
    @if $print == true {
      @media print, (width <= $key-value) {
        @content;
      }
    } @else if $print == false {
      @media screen and (width <= $key-value) {
        @content;
      }
    } @else {
      @media (width <= $key-value) {
        @content;
      }
    }
  }
}

///
/// 幅が指定したブレークポイントの場合にスタイルを適用する
///
/// @param {string} $key - $breakpointsのキー
/// @param {boolean | null} $print [null] - 印刷時にスタイルを適用するかどうか true=適用する false=適用しない null=ブレークポイントや用紙サイズによる
///
/// @example scss - scss
///   @use '@iwbc/sass-utils/scss/breakpoint' with (
///     $breakpoints: ('sp': 0, 'tab': 768px, 'pc': 1200px)
///   );
///
///   .tab {
///     @include breakpoint.only('tab') {
///       width: 50%;
///     }
///   }
///
///   .print {
///     @include breakpoint.only('tab', true) {
///       width: 50%;
///     }
///   }
///
///   .no-print {
///     @include breakpoint.only('tab', false) {
///       width: 50%;
///     }
///   }
///
/// @example css - css
///   @media (768px <= width < 1200px) {
///     .tab {
///       width: 50%;
///     }
///   }
///
///   @media print, (768px <= width < 1200px) {
///     .print {
///       width: 50%;
///     }
///   }
///
///   @media screen and (768px <= width < 1200px) {
///     .no-print {
///       width: 50%;
///     }
///   }
///
@mixin only($key, $print: null) {
  @if map.has-key(variables.$breakpoints, $key) {
    $min: functions.get-value($key);
    $next: functions.get-next-value($key);

    @if unit.strip($min) != 0 and $next {
      $print: functions.print($min, $print);

      @if $print == true {
        @media print, ($min <= width < $next) {
          @content;
        }
      } @else if $print == false {
        @media screen and ($min <= width < $next) {
          @content;
        }
      } @else {
        @media ($min <= width < $next) {
          @content;
        }
      }
    } @else if unit.strip($min) == 0 and $next {
      @include max($key, $print) {
        @content;
      }
    } @else if unit.strip($min) != 0 and $next == null {
      $print: functions.print($min, $print);

      @include min($key, $print) {
        @content;
      }
    } @else {
      @if $print == true {
        @media print {
          @content;
        }
      } @else if $print == false {
        @media screen {
          @content;
        }
      } @else {
        @content;
      }
    }
  }

  // エラー
  @else {
    @error "Invalid key, `#{$key}` is not defined. Choose one of #{map.keys(variables.$breakpoints)}.";
  }
}

///
/// 幅が指定した2つのブレークポイントの範囲内の場合にスタイルを適用する
///
/// @param {string} $min-key-value - 適用したい最小の$breakpointsのキーまたは幅の値
/// @param {string} $max-key-value - 適用したい最大の$breakpointsのキーまたは幅の値
/// @param {boolean | null} $print [null] - 印刷時にスタイルを適用するかどうか true=適用する false=適用しない null=ブレークポイントや用紙サイズによる
///
/// @example scss - scss
///   @use '@iwbc/sass-utils/scss/breakpoint' with (
///     $breakpoints: $breakpoints: (
///       'xs': 0,
///       'sm': 480px,
///       'md': 768px,
///       'lg': 960px,
///       'xl': 1200px,
///     )
///   );
///
///   .sm-lg {
///     @include breakpoint.between('sm', 'lg') {
///       width: 50%;
///     }
///   }
///
///   .any {
///     @include breakpoint.between(1024px, 1440px) {
///       width: 50%;
///     }
///   }
///
///   .print {
///     @include breakpoint.between('sm', 'lg', true) {
///       width: 50%;
///     }
///   }
///
///   .no-print {
///     @include breakpoint.between('sm', 'lg', false) {
///       width: 50%;
///     }
///   }
///
/// @example css - css
///   @media (480px <= width < 1200px) {
///     .sm-lg {
///       width: 50%;
///     }
///   }
///
///   @media (1024px <= width <= 1440px) {
///     .any {
///       width: 50%;
///     }
///   }
///
///   @media print, (480px <= width < 1200px) {
///     .print {
///       width: 50%;
///     }
///   }
///
///   @media screen and (480px <= width < 1200px) {
///     .no-print {
///       width: 50%;
///     }
///   }
///
@mixin between($min-key-value, $max-key-value, $print: null) {
  // $min-key-valueと$max-key-valueがキーの場合
  @if map.has-key(variables.$breakpoints, $min-key-value) and map.has-key(variables.$breakpoints, $max-key-value) {
    $min: functions.get-value($min-key-value);
    $next: functions.get-next-value($max-key-value);

    @if unit.strip($min) != 0 and $next {
      $print: functions.print($min, $print);

      @if $print == true {
        @media print, ($min <= width < $next) {
          @content;
        }
      } @else if $print == false {
        @media screen and ($min <= width < $next) {
          @content;
        }
      } @else {
        @media ($min <= width < $next) {
          @content;
        }
      }
    } @else if unit.strip($min) == 0 and $next {
      @include max($max-key-value, $print) {
        @content;
      }
    } @else if unit.strip($min) != 0 and $next == null {
      $print: functions.print($min, $print);

      @include min($min-key-value, $print) {
        @content;
      }
    } @else {
      @if $print == true {
        @media print {
          @content;
        }
      } @else if $print == false {
        @media screen {
          @content;
        }
      } @else {
        @content;
      }
    }
  }

  // $min-key-valueがキー、$max-key-valueが値の場合
  @else if map.has-key(variables.$breakpoints, $min-key-value) {
    $min: functions.get-value($min-key-value);
    $max: $max-key-value;

    @if unit.strip($min) != 0 {
      $print: functions.print($min, $print);

      @if $print == true {
        @media print, ($min <= width <= $max) {
          @content;
        }
      } @else if $print == false {
        @media screen and ($min <= width <= $max) {
          @content;
        }
      } @else {
        @media ($min <= width <= $max) {
          @content;
        }
      }
    } @else {
      @include max($max, $print) {
        @content;
      }
    }
  }

  // $min-key-valueが値、$max-key-valueがキーの場合
  @else if map.has-key(variables.$breakpoints, $max-key-value) {
    $min: $min-key-value;
    $next: functions.get-next-value($max-key-value);

    @if unit.strip($min) != 0 and $next {
      $print: functions.print($min, $print);

      @if $print == true {
        @media print, ($min <= width < $next) {
          @content;
        }
      } @else if $print == false {
        @media screen and ($min <= width < $next) {
          @content;
        }
      } @else {
        @media ($min <= width < $next) {
          @content;
        }
      }
    } @else if unit.strip($min) == 0 and $next {
      @include max($max-key-value, $print) {
        @content;
      }
    } @else if unit.strip($min) != 0 and $next == null {
      $print: functions.print($min, $print);

      @include min($min, $print) {
        @content;
      }
    } @else {
      @if $print == true {
        @media print {
          @content;
        }
      } @else if $print == false {
        @media screen {
          @content;
        }
      } @else {
        @content;
      }
    }
  }

  // $min-key-valueと$max-key-valueが値の場合
  @else {
    $min: $min-key-value;
    $max: $max-key-value;

    @if unit.strip($min) != 0 {
      $print: functions.print($min, $print);

      @if $print == true {
        @media print, ($min <= width <= $max) {
          @content;
        }
      } @else if $print == false {
        @media screen and ($min <= width <= $max) {
          @content;
        }
      } @else {
        @media ($min <= width <= $max) {
          @content;
        }
      }
    } @else {
      @include max($max, $print) {
        @content;
      }
    }
  }
}
