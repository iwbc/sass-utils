@use 'true' as *;
@use '../scss/breakpoint//variables' with (
  $breakpoints: (
    'xs': 0,
    'sm': 480px,
    'md': 768px,
    'lg': 960px,
    'xl': 1200px,
  )
);
@use '../scss/breakpoint/functions';
@use '../scss/breakpoint/mixins';

$catch-errors: true;

@include describe('breakpoint') {
  @include describe('functions') {
    @include describe('get()') {
      @include it('指定したブレークポイントの値を返す') {
        @include assert-equal(functions.get-value('md'), 768px);
      }

      @include it('指定したブレークポイントが存在しない場合はnullを返す') {
        @include assert-equal(functions.get-value('unknown'), null);
      }
    }

    @include describe('get-next()') {
      @include it('次のブレークポイントの値を返す') {
        @include assert-equal(functions.get-next-value('md'), 960px);
      }

      @include it('次のブレークポイントが存在しない場合はnullを返す') {
        @include assert-equal(functions.get-next-value('xl'), null);
      }

      @include it('指定したブレークポイントが存在しない場合はnullを返す') {
        @include assert-equal(functions.get-next-value('unknown'), null);
      }
    }
  }

  @include describe('mixins') {
    @include describe('min') {
      @include it('ブレークポイントルールを返す') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min('xs') {
                width: 100%;
              }

              @include mixins.min('md') {
                width: 50%;
              }

              @include mixins.min('xl') {
                width: 25%;
              }
            }

            .mediatype {
              @include mixins.min('md', 'screen, print') {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            .element {
              width: 100%;
            }

            @media (768px <= width) {
              .element {
                width: 50%;
              }
            }

            @media (1200px <= width) {
              .element {
                width: 25%;
              }
            }

            @media screen, print and (768px <= width) {
              .mediatype {
                color: #f00;
              }
            }
          }
        }
      }
    }

    @include describe('max') {
      @include it('ブレークポイントルールを返す') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.max('xl') {
                width: 25%;
              }

              @include mixins.max('md') {
                width: 50%;
              }

              @include mixins.max('xs') {
                width: 100%;
              }
            }

            .mediatype {
              @include mixins.max('md', 'screen, print') {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            .element {
              width: 25%;
            }

            @media (width < 960px) {
              .element {
                width: 50%;
              }
            }

            @media (width < 480px) {
              .element {
                width: 100%;
              }
            }

            @media screen, print and (width < 960px) {
              .mediatype {
                color: #f00;
              }
            }
          }
        }
      }
    }

    @include describe('only') {
      @include it('ブレークポイントルールを返す') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.only('xs') {
                width: 100%;
              }

              @include mixins.only('md') {
                width: 50%;
              }

              @include mixins.only('xl') {
                width: 25%;
              }
            }

            .mediatype {
              @include mixins.only('md', 'screen, print') {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media (width < 480px) {
              .element {
                width: 100%;
              }
            }

            @media (768px <= width < 960px) {
              .element {
                width: 50%;
              }
            }

            @media (1200px <= width) {
              .element {
                width: 25%;
              }
            }

            @media screen, print and (768px <= width < 960px) {
              .mediatype {
                color: #f00;
              }
            }
          }
        }
      }
    }

    @include describe('between') {
      @include it('ブレークポイントルールを返す') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between('xs', 'md') {
                width: 100%;
              }

              @include mixins.between('sm', 'lg') {
                width: 50%;
              }

              @include mixins.between('md', 'xl') {
                width: 25%;
              }
            }

            .mediatype {
              @include mixins.between('sm', 'lg', 'screen, print') {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media (width < 960px) {
              .element {
                width: 100%;
              }
            }

            @media (480px <= width < 1200px) {
              .element {
                width: 50%;
              }
            }

            @media (768px <= width) {
              .element {
                width: 25%;
              }
            }

            @media screen, print and (480px <= width < 1200px) {
              .mediatype {
                color: #f00;
              }
            }
          }
        }
      }
    }
  }
}
