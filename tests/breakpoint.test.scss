/* stylelint-disable length-zero-no-unit */

@use 'true' as *;
@use '../scss/breakpoint/variables' with (
  $breakpoints: (
    'xs': 0,
    'sm': 480px,
    'md': 768px,
    'lg': 960px,
    'xl': 1200px,
  ),
  $print-min-width: 768px
);
@use '../scss/breakpoint/functions';
@use '../scss/breakpoint/mixins';

$catch-errors: true;

@include test-module('breakpoint') {
  @include test-module('functions') {
    @include test-module('get()') {
      @include test('指定したブレークポイントの値を返す') {
        @include assert-equal(functions.get-value('md'), 768px);
      }

      @include test('指定したブレークポイントが存在しない場合はnullを返す') {
        @include assert-equal(functions.get-value('not-exist'), null);
      }
    }

    @include test-module('get-next()') {
      @include test('次のブレークポイントの値を返す') {
        @include assert-equal(functions.get-next-value('md'), 960px);
      }

      @include test('次のブレークポイントが存在しない場合はnullを返す') {
        @include assert-equal(functions.get-next-value('xl'), null);
      }

      @include test('指定したブレークポイントが存在しない場合はnullを返す') {
        @include assert-equal(functions.get-next-value('not-exist'), null);
      }
    }
  }

  @include test-module('mixins') {
    /**
     * vssvars
     */
    @include test-module('cssvars') {
      @include test('すべてのブレークポイントをCSS変数として出力する') {
        @include assert {
          @include output(false) {
            :root {
              @include mixins.cssvars;
            }
          }

          @include expect(false) {
            :root {
              --breakpoint-xs: 0;
              --breakpoint-sm: 480px;
              --breakpoint-md: 768px;
              --breakpoint-lg: 960px;
              --breakpoint-xl: 1200px;
            }
          }
        }
      }
    }

    /**
     * min
     */
    @include test-module('min') {
      @include test('ブレークポイントルールを返す / 引数: "xs"（0 <= width）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min('xs') {
                width: 100%;
              }
            }
          }

          @include expect(false) {
            .element {
              width: 100%;
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: "sm"（480px <= width）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min('sm') {
                width: 50%;
              }
            }
          }

          @include expect(false) {
            @media (480px <= width) {
              .element {
                width: 50%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: "md"（768px <= width）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min('md') {
                width: 50%;
              }
            }
          }

          @include expect(false) {
            @media print, (768px <= width) {
              .element {
                width: 50%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: "xl"（1200px <= width）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min('xl') {
                width: 25%;
              }
            }
          }

          @include expect(false) {
            @media print, (1200px <= width) {
              .element {
                width: 25%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: 1440px') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min(1440px) {
                width: 20%;
              }
            }
          }

          @include expect(false) {
            @media print, (1440px <= width) {
              .element {
                width: 20%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: 0px') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min(0px) {
                width: 100%;
              }
            }
          }

          @include expect(false) {
            .element {
              width: 100%;
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す（$print = true） / 引数: "sm", true') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min('sm', true) {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media print, (480px <= width) {
              .element {
                color: #f00;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す（$print = true） / 引数: "xs", true') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min('xs', true) {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media print {
              .element {
                color: #f00;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す（$print = false） / 引数: "md", false') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min('md', false) {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media screen and (768px <= width) {
              .element {
                color: #f00;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す（$print = false） / 引数: "xs", false') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.min('xs', false) {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media screen {
              .element {
                color: #f00;
              }
            }
          }
        }
      }
    }

    /**
     * max
     */
    @include test-module('max') {
      @include test('ブレークポイントルールを返す / 引数: "xl"（width <= ∞）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.max('xl') {
                width: 25%;
              }
            }
          }

          @include expect(false) {
            .element {
              width: 25%;
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: "md"（width < 960px）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.max('md') {
                width: 50%;
              }
            }
          }

          @include expect(false) {
            @media (width < 960px) {
              .element {
                width: 50%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: "xs"（width < 480px）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.max('xs') {
                width: 100%;
              }
            }
          }

          @include expect(false) {
            @media (width < 480px) {
              .element {
                width: 100%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: 1440px）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.max(1440px) {
                width: 100%;
              }
            }
          }

          @include expect(false) {
            @media (width <= 1440px) {
              .element {
                width: 100%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す（$print = true） / 引数: "md", true') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.max('md', true) {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media print, (width < 960px) {
              .element {
                color: #f00;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す（$print = false） / 引数: "md", false') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.max('md', false) {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media screen and (width < 960px) {
              .element {
                color: #f00;
              }
            }
          }
        }
      }
    }

    /**
     * only
     */
    @include test-module('only') {
      @include test('ブレークポイントルールを返す / 引数: "xs"（0 <= width < 480px）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.only('xs') {
                width: 100%;
              }
            }
          }

          @include expect(false) {
            @media (width < 480px) {
              .element {
                width: 100%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: "md"（768px <= width < 960px）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.only('md') {
                width: 50%;
              }
            }
          }

          @include expect(false) {
            @media print, (768px <= width < 960px) {
              .element {
                width: 50%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: "xl"（1200px <= width <= ∞）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.only('xl') {
                width: 25%;
              }
            }
          }

          @include expect(false) {
            @media print, (1200px <= width) {
              .element {
                width: 25%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す（$print = true） / 引数: "sm"（480px <= width < 768px）, true') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.only('sm', true) {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media print, (480px <= width < 768px) {
              .element {
                color: #f00;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す（$print = false） / 引数: "md"（768px <= width < 960px）, false') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.only('md', false) {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media screen and (768px <= width < 960px) {
              .element {
                color: #f00;
              }
            }
          }
        }
      }
    }

    /**
     * between
     */
    @include test-module('between') {
      @include test('ブレークポイントルールを返す / 引数: "xs", "md"（0 <= width < 960px）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between('xs', 'md') {
                width: 100%;
              }
            }
          }

          @include expect(false) {
            @media (width < 960px) {
              .element {
                width: 100%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: "sm", "lg"（480px <= width < 1200px）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between('sm', 'lg') {
                width: 50%;
              }
            }
          }

          @include expect(false) {
            @media (480px <= width < 1200px) {
              .element {
                width: 50%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: "md", "xl"（768px <= width <= ∞）') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between('md', 'xl') {
                width: 25%;
              }
            }
          }

          @include expect(false) {
            @media print, (768px <= width) {
              .element {
                width: 25%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: 960px, 1280px') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between(960px, 1280px) {
                width: 25%;
              }
            }
          }

          @include expect(false) {
            @media print, (960px <= width <= 1280px) {
              .element {
                width: 25%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: "sm", 1280px') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between('sm', 1280px) {
                width: 25%;
              }
            }
          }

          @include expect(false) {
            @media (480px <= width <= 1280px) {
              .element {
                width: 25%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: 600px, "lg"') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between(600px, 'lg') {
                width: 25%;
              }
            }
          }

          @include expect(false) {
            @media (600px <= width < 1200px) {
              .element {
                width: 25%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: 0px, 1280px') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between(0px, 1280px) {
                width: 100%;
              }
            }
          }

          @include expect(false) {
            @media (width <= 1280px) {
              .element {
                width: 100%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す / 引数: 0px, "lg"') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between(0px, 'lg') {
                width: 100%;
              }
            }
          }

          @include expect(false) {
            @media (width < 1200px) {
              .element {
                width: 100%;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す（$print = true） / 引数: "sm", "lg", true') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between('sm', 'lg', true) {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media print, (480px <= width < 1200px) {
              .element {
                color: #f00;
              }
            }
          }
        }
      }

      @include test('ブレークポイントルールを返す（$print = false） / 引数: "md", "xl", false') {
        @include assert {
          @include output(false) {
            .element {
              @include mixins.between('md', 'xl', false) {
                color: #f00;
              }
            }
          }

          @include expect(false) {
            @media screen and (768px <= width) {
              .element {
                color: #f00;
              }
            }
          }
        }
      }
    }
  }
}
