@use 'true' as *;
@use '../scss/unit/variables' with (
  $base-font-size: 16px
);
@use '../scss/unit/functions';

$catch-errors: true;

@include describe('unit') {
  @include describe('functions') {
    @include describe('rem()') {
      @include it('px値をrem値に変換して返す') {
        @include assert-equal(functions.rem(16px), 1rem);
        @include assert-equal(functions.rem(16px, 16px), 1rem);
        @include assert-equal(functions.rem(16, 16), 1rem);
      }

      @include it('数値以外を渡した場合はエラーを返す') {
        @include assert-equal(
          functions.rem('string', 16px),
          'ERROR [unit.rem()]: Invalid `string` type. Choose a number type instead.'
        );
        @include assert-equal(
          functions.rem(16px, 'string'),
          'ERROR [unit.rem()]: Invalid `string` type. Choose a number type instead.'
        );
      }
    }

    @include describe('per()') {
      @include it('px値を%値に変換して返す') {
        @include assert-equal(functions.per(100px, 100px), 100%);
        @include assert-equal(functions.per(50, 100), 50%);
      }

      @include it('数値以外を渡した場合はエラーを返す') {
        @include assert-equal(
          functions.per('string', 100px),
          'ERROR [unit.per()]: Invalid `string` type. Choose a number type instead.'
        );
        @include assert-equal(
          functions.per(100px, 'string'),
          'ERROR [unit.per()]: Invalid `string` type. Choose a number type instead.'
        );
      }
    }

    @include describe('vw()') {
      @include it('px値を%値に変換して返す') {
        @include assert-equal(functions.vw(375px), 100lvw);
        @include assert-equal(functions.vw(100px, 100px), 100lvw);
        @include assert-equal(functions.vw(50, 100), 50lvw);
        @include assert-equal(functions.vw(100px, 100px, 'svw'), 100svw);
        @include assert-equal(functions.vw(100px, 100px, 'lvw'), 100lvw);
        @include assert-equal(functions.vw(100px, 100px, 'dvw'), 100dvw);
        @include assert-equal(functions.vw(100px, 100px, 'vw'), 100vw);
      }

      @include it('数値以外を渡した場合はエラーを返す') {
        @include assert-equal(
          functions.vw('string', 100px),
          'ERROR [unit.vw()]: Invalid `string` type. Choose a number type instead.'
        );
        @include assert-equal(
          functions.vw(100px, 'string'),
          'ERROR [unit.vw()]: Invalid `string` type. Choose a number type instead.'
        );
      }
    }

    @include describe('vh()') {
      @include it('px値を%値に変換して返す') {
        @include assert-equal(functions.vh(667px), 100lvh);
        @include assert-equal(functions.vh(100px, 100px), 100lvh);
        @include assert-equal(functions.vh(50, 100), 50lvh);
        @include assert-equal(functions.vh(100px, 100px, 'svh'), 100svh);
        @include assert-equal(functions.vh(100px, 100px, 'lvh'), 100lvh);
        @include assert-equal(functions.vh(100px, 100px, 'dvh'), 100dvh);
        @include assert-equal(functions.vh(100px, 100px, 'vh'), 100vh);
      }

      @include it('数値以外を渡した場合はエラーを返す') {
        @include assert-equal(
          functions.vh('string', 100px),
          'ERROR [unit.vh()]: Invalid `string` type. Choose a number type instead.'
        );
        @include assert-equal(
          functions.vh(100px, 'string'),
          'ERROR [unit.vh()]: Invalid `string` type. Choose a number type instead.'
        );
      }
    }

    @include describe('strip()') {
      @include it('単位付き数値から単位を取り除いた数値を返す') {
        @include assert-equal(functions.strip(100px), 100);
      }

      @include it('単位なし数値はそのまま返す') {
        @include assert-equal(functions.strip(100), 100);
      }

      @include it('数値以外を渡した場合はエラーを返す') {
        @include assert-equal(
          functions.strip('string'),
          'ERROR [unit.strip()]: Invalid `string` type. Choose a number type instead.'
        );
      }
    }

    @include describe('abs-to-rel()') {
      @include it('絶対単位の値から相対単位の値に変換して返す') {
        @include assert-equal(functions.abs-to-rel(10px, 100px), 0.1);
      }

      @include it('絶対単位の値から相対単位の値に変換して返す（百分率）') {
        @include assert-equal(functions.abs-to-rel(10px, 100px, true), 10);
      }

      @include it('数値以外を渡した場合はエラーを返す') {
        @include assert-equal(
          functions.abs-to-rel('string', 100px),
          'ERROR [unit.abs-to-rel()]: Invalid `string` type. Choose a number type instead.'
        );
        @include assert-equal(
          functions.abs-to-rel(100px, 'string'),
          'ERROR [unit.abs-to-rel()]: Invalid `string` type. Choose a number type instead.'
        );
      }
    }
  }
}
